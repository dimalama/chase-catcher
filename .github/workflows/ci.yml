name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scan

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write
  checks: write

jobs:
  verify-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Check PR Title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
          revert

  dependencies:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    - name: Setup npm cache
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-deps-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-deps-
    - name: Install dependencies
      run: npm ci
    - name: Check for outdated dependencies
      run: npm outdated || true
    - name: Audit dependencies
      run: npm audit

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    - name: Setup npm cache
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-lint-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-lint-
    - name: Install dependencies
      run: npm ci
    - name: Run ESLint
      run: npm run lint
    - name: Check formatting
      run: npm run format
    - name: Report Lint Results
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const results = process.env.LINT_RESULTS
          if (results) {
            const issues = JSON.parse(results)
            const body = issues.map(issue => 
              `- ${issue.filePath}:${issue.line} - ${issue.message}`
            ).join('\n')
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Lint Issues Found\n${body}`
            })
          }

  test:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    - name: Setup npm cache
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-test-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-test-
    - name: Install dependencies
      run: npm ci
    - name: Run tests
      run: |
        mkdir -p coverage
        npm test -- --coverage --reporters=default --reporters=jest-junit
      env:
        JEST_JUNIT_OUTPUT_DIR: ./coverage
        JEST_JUNIT_OUTPUT_NAME: junit.xml
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
    - name: Report Test Results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Jest Tests
        path: coverage/junit.xml
        reporter: jest-junit
        fail-on-error: true

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    - name: Setup npm cache
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-security-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-security-
    - name: Install dependencies
      run: npm ci
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-extended,security-and-quality
        config-file: ./.github/codeql/codeql-config.yml
    - name: Build project
      run: npm run build
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
        upload: true

  build:
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    - name: Setup npm cache
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-build-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-build-
    - name: Install dependencies
      run: npm ci
    - name: Build extension
      run: npm run build
    - name: Package Extension
      run: npm run package
    - name: Upload extension artifact
      uses: actions/upload-artifact@v3
      with:
        name: chase-catcher-extension
        path: dist/chase-catcher.zip
        retention-days: 5

  size:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v3
    - name: Download extension artifact
      uses: actions/download-artifact@v3
      with:
        name: chase-catcher-extension
    - name: Compare bundle size
      uses: preactjs/compressed-size-action@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        pattern: "dist/**/*.{js,css,html,json}"

  preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Download extension artifact
      uses: actions/download-artifact@v3
      with:
        name: chase-catcher-extension
    - name: Create PR Comment
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸŽ‰ Preview build is ready!\nYou can download the extension from the artifacts section.'
          })

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v3
    - name: Download extension artifact
      uses: actions/download-artifact@v3
      with:
        name: chase-catcher-extension
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: chase-catcher.zip
